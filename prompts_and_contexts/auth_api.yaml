openapi: 3.0.0
info:
  title: User Authentication API
  version: 1.0.0
  description: |
    Comprehensive API documentation for the User Authentication Service with Resource-Based Access Control (RBAC).
    
    This API provides:
    - User authentication and authorization
    - Global role-based access control
    - Resource-specific role and permission management
    - OpenID Connect (OIDC) configuration
    - JWT token management
    
    ## Authentication
    Most endpoints require authentication via JWT Bearer tokens. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Resource-Based Access Control
    The API supports both global roles (ADMIN, SUPERADMIN) and resource-specific roles.
    - Users can have multiple global roles
    - Users can have different roles for different resources
    - A user can only have one role per resource
    - Permissions are verb-based (read, write, update, delete, etc.)
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server

tags:
  - name: Auth
    description: User authentication and authorization
  - name: Users
    description: User management
  - name: RBAC
    description: Role-based access control (global roles and permissions)
  - name: Resources
    description: Resource-based role and permission management
  - name: Admin
    description: Administrative endpoints (SUPERADMIN only)
  - name: Config
    description: System configuration endpoints
  - name: OIDC
    description: OpenID Connect configuration
  - name: Health
    description: Health check endpoints
  - name: UserDetails
    description: User details management
  - name: Permissions
    description: Permission management

paths:
  # Health Check
  /health:
    get:
      tags: [Health]
      summary: Health check endpoint
      description: Simple health check to verify the API is running
      responses:
        '200':
          description: API is healthy
          content:
            text/plain:
              schema:
                type: string
                example: OK

  # Admin Endpoints
  /admin/status:
    get:
      tags: [Admin]
      summary: Get admin status counts (SUPERADMIN only)
      description: |
        Returns counts of users, resources, and roles with their respective statuses. 
        Only accessible by SUPERADMIN users. Resource counts exclude the WINDBOOKS_APP seed resource.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Admin status counts retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminStatusResponse'
        '401':
          description: Unauthorized - No token provided or invalid token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - User is not SUPERADMIN
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Authentication Endpoints
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Conflict - email is already used
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [Auth]
      summary: Log in a user and get JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Unauthorized - invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags: [Auth]
      summary: Log out a user and revoke refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '204':
          description: User logged out successfully
        '400':
          description: Bad request - invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [Auth]
      summary: Update current user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error or old password mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Auth]
      summary: Deactivate current user's account
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Account deactivated successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/validate:
    post:
      tags: [Auth]
      summary: Validate an access token
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateTokenRequest'
      responses:
        '200':
          description: Token validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenValidationResult'
        '400':
          description: Bad request - missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify/{verificationCode}:
    post:
      tags: [Auth]
      summary: Verify user email using verification code
      parameters:
        - in: path
          name: verificationCode
          required: true
          schema:
            type: string
            description: The email verification code sent to the user
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email verified successfully"
        '400':
          description: Bad request - invalid, expired, or already used verification code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/resend-verification:
    post:
      tags: [Auth]
      summary: Resend email verification code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification email sent successfully"
        '400':
          description: Bad request - user not found, already verified, or invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/auth/reset-password/request/email:
    post:
      tags: [Auth]
      summary: Request password reset email
      description: |
        Send a password reset email to the specified email address.
        
        **Rate Limiting:**
        - Users can only request password reset emails once every 30 minutes
        - If a request was made within the last 30 minutes, the request will be rejected
        
        **Email Content:**
        - Contains a secure JWT token in the reset link
        - Token expires after 1 hour
        - Link directs to the configured PASSWORD_RESET_URL
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  description: The email address to send the password reset email to
                  example: "user@example.com"
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset email sent successfully"
        '400':
          description: Bad request - invalid email format or rate limit exceeded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found with the provided email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user/auth/reset-password:
    post:
      tags: [Auth]
      summary: Reset password with token
      description: |
        Reset a user's password using a valid JWT token from the password reset email.
        
        **Token Validation:**
        - Token must be valid and not expired (1 hour expiry)
        - Token must contain the correct user ID
        - Token must be signed with the correct secret
        
        **Password Requirements:**
        - Minimum 6 characters
        - Must match confirmation password
        
        **Security:**
        - Token is invalidated after successful password reset
        - Old password is completely replaced with new hash
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password reset successfully"
        '400':
          description: Bad request - invalid token, expired token, or password validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User Management Endpoints
  /users:
    get:
      tags: [Users]
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
    post:
      tags: [Users]
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /users/v2:
    get:
      tags: [Users]
      summary: Get all users (paginated)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: email
          in: query
          schema:
            type: string
          description: Filter users by email (case-insensitive partial match)
        - name: isActive
          in: query
          schema:
            type: boolean
          description: Filter users by active status (true for active, false for inactive)
      responses:
        '200':
          description: Paginated list of users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsersResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /users/{id}:
    get:
      tags: [Users]
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found
    delete:
      tags: [Users]
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found

  /users/{id}/super-admin:
    put:
      tags: [Users]
      summary: Update a user's super admin status
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserSuperAdminRequest'
      responses:
        '200':
          description: User super admin status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found

  /users/{id}/deactivate:
    put:
      tags: [Users]
      summary: Deactivate a user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found

  /users/{id}/activate:
    put:
      tags: [Users]
      summary: Activate a user
      description: Activate a deactivated user account. Only SUPERADMIN users can perform this action.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '204':
          description: User activated successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - only SUPERADMIN can activate users
        '404':
          description: User not found

  /users/assign-role:
    post:
      tags: [Users]
      summary: Assign a resource role to a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignUserResourceRole'
      responses:
        '201':
          description: Role assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResourceRole'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /users/revoke-role:
    post:
      tags: [Users]
      summary: Revoke a resource role from a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeUserResourceRole'
      responses:
        '204':
          description: Role revoked successfully
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /user/update/password:
    post:
      tags: [Users]
      summary: Update user password
      description: |
        Update a user's password. 
        
        **Authorization Rules:**
        - SUPERADMIN users can update any user's password without providing current password
        - Regular users can only update their own password and must provide current password
        
        **Password Requirements:**
        - Minimum 6 characters
        
        **Email Notification:**
        - An email notification is automatically sent to the user whose password was updated
        - The notification includes details about who updated the password and when
        - Must match confirmation password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePasswordRequest'
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Password updated successfully"
        '400':
          description: Bad request - validation error or invalid current password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found

  /user/last-update/creds/{userId}:
    get:
      tags: [Users]
      summary: Get user password update history
      description: |
        Retrieve the password update history for a user.
        
        **Authorization Rules:**
        - SUPERADMIN users can view any user's password update history
        - Regular users can only view their own password update history
        
        **Response:**
        - Returns last update timestamp, who updated it, and total count
        - Returns null values if no password updates have been made
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the user
      responses:
        '200':
          description: Password update history retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordUpdateHistoryResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found

  /user/last-login:
    get:
      tags: [Users]
      summary: Get user's last login timestamp
      description: |
        Retrieve the last login timestamp for the authenticated user.
        
        **Authorization Rules:**
        - Users can only view their own last login timestamp
        
        **Response:**
        - Returns last login timestamp in MM/DD/YYYY HH:MM:SS format
        - Returns null if the user has never logged in
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Last login timestamp retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LastLoginResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  # Global RBAC Endpoints
  /roles:
    get:
      tags: [RBAC]
      summary: Get all global roles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /roles/available:
    get:
      tags: [RBAC]
      summary: Get available roles for UI consumption
      description: Retrieve a simplified list of all available roles that can be used by the frontend for user interface components like dropdowns or role selection
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of available roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableRole'
        '401':
          description: Unauthorized - authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Resource-Based RBAC Endpoints
  /resources:
    get:
      tags: [Resources]
      summary: Get resources accessible to the authenticated user
      description: Retrieve all resources that the authenticated user has access to based on their assigned roles and permissions. Super admins see all resources, while regular users only see resources they have been granted access to.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of accessible resources retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
    post:
      tags: [Resources]
      summary: Create a new resource
      description: Create a new resource and automatically initialize it with an ACTIVE status. A ResourceStatus record is created alongside the resource to track its lifecycle state.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceRequest'
      responses:
        '201':
          description: Resource created successfully with ACTIVE status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /resources/v2:
    get:
      tags: [Resources]
      summary: Get resources accessible to the authenticated user (paginated)
      description: Retrieve paginated resources that the authenticated user has access to based on their assigned roles and permissions. Super admins see all resources, while regular users only see resources they have been granted access to.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: resourceName
          in: query
          schema:
            type: string
          description: Filter resources by name (case-insensitive partial match)
        - name: resourceId
          in: query
          schema:
            type: string
          description: Filter resources by exact resource ID
        - name: q
          in: query
          schema:
            type: string
          description: General search query that filters resources by name or ID (case-insensitive partial match)
      responses:
        '200':
          description: Paginated list of accessible resources retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResourcesResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /resources/roles:
    post:
      tags: [Resources]
      summary: Create a role for a resource
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceRole'
      responses:
        '201':
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceRole'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /resources/assign-role:
    post:
      tags: [Resources]
      summary: Assign a user to a resource role
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignUserResourceRole'
      responses:
        '201':
          description: Role assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResourceRole'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /resources/revoke-role:
    post:
      tags: [Resources]
      summary: Revoke a user's resource role
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeUserResourceRole'
      responses:
        '204':
          description: Role revoked successfully
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /resources/{resourceId}/test-read:
    get:
      tags: [Resources]
      summary: Test endpoint for read permission authorization
      description: Test endpoint to verify that the authorizeResource middleware works for read permissions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
          description: The unique identifier of the resource
      responses:
        '200':
          description: Access granted - user has read permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access granted"
                  action:
                    type: string
                    example: "read"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions for this resource

  /resources/{resourceId}/test-write:
    post:
      tags: [Resources]
      summary: Test endpoint for write permission authorization
      description: Test endpoint to verify that the authorizeResource middleware works for write/update permissions
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
          description: The unique identifier of the resource
      responses:
        '200':
          description: Access granted - user has write/update permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access granted"
                  action:
                    type: string
                    example: "write"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions for this resource

  /resources/{resourceId}/user-role:
    get:
      tags: [Resources]
      summary: Get the role of the authenticated user for a specific resource
      description: Retrieve the role assigned to the currently authenticated user for a specific resource
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: resourceId
          required: true
          schema:
            type: string
          description: The unique identifier of the resource
      responses:
        '200':
          description: User role retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResourceRoleResponse'
        '401':
          description: Unauthorized
        '404':
          description: No role found for this user on the specified resource
        '500':
          description: Internal server error

  /resources/{userId}:
    get:
      tags: [Resources]
      summary: Get all resources and roles assigned to a specific user
      description: Retrieve all resources and their corresponding roles assigned to a user. Super admins can access any user's data, while regular users can only access their own data.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: The unique identifier of the user
      responses:
        '200':
          description: User resources and roles retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  resources:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserResourceRoleAssignment'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - regular users can only access their own data
        '404':
          description: User not found
        '500':
          description: Internal server error

  /resources/user-roles:
    post:
      tags: [Resources]
      summary: Get resource roles for authenticated user given a list of resourceIds
      description: |
        Retrieve the roles assigned to the currently authenticated user for a list of specified resources.
        
        **Authentication Required**: This endpoint requires a valid JWT Bearer token.
        
        **Authorization**:
        - Regular users: Returns only roles for resources they have access to
        - Super admins: Returns all requested resource roles
        
        **Request Body**: Must contain an array of resource IDs to query
        
        **Response**: Returns an array of resource-role assignments for the authenticated user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetResourceRolesRequest'
            example:
              resources: ["cmga8vhx10000n3q4mqfdvqea", "cmga8vhx40001n3q449tq1qz8"]
      responses:
        '200':
          description: Resource roles retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetResourceRolesResponse'
              example:
                resourceRoles:
                  - resourceId: "cmga8vhx10000n3q4mqfdvqea"
                    roleName: "STAFF"
                    roleId: "cmga8vhx50002n3q4abc123def"
                  - resourceId: "cmga8vhx40001n3q449tq1qz8"
                    roleName: "ADMIN"
                    roleId: "cmga8vhx60003n3q4def456ghi"
        '400':
          description: Bad request - invalid request body or validation errors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missing_resources:
                  summary: Missing resources field
                  value:
                    message: "resources is required"
                empty_array:
                  summary: Empty resources array
                  value:
                    message: "At least one resource ID is required"
                invalid_type:
                  summary: Invalid resources type
                  value:
                    message: "resources must be an array"
        '401':
          description: Unauthorized - missing or invalid JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Authentication required"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Failed to get resource roles"



  /resources/{id}:
    delete:
      tags: [Resources]
      summary: Soft delete a resource
      description: Mark a resource as deleted (soft delete) by updating its ResourceStatus to DELETED. The resource will no longer appear in GET requests but remains in the database for audit purposes.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique identifier of the resource to delete
      responses:
        '204':
          description: Resource successfully marked as deleted (status set to DELETED)
        '400':
          description: Bad request - resource is already deleted
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: Resource not found
        '500':
          description: Internal server error


  # Configuration Endpoints
  /config/permissions:
    get:
      tags: [Config]
      summary: Get role-permission mapping
      description: Retrieve the system-wide default role-to-permission mapping
      responses:
        '200':
          description: Role-permission mapping retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    role:
                      type: string
                      example: "ADMIN"
                    permissions:
                      type: array
                      items:
                        type: string
                        example: "read:users"
        '500':
          description: Internal server error

  # OpenID Connect Endpoints
  /.well-known/openid-configuration:
    get:
      tags: [OIDC]
      summary: Get OpenID Connect configuration
      description: Returns the OpenID Connect configuration for this authorization server
      responses:
        '200':
          description: OpenID Connect configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIDConfiguration'

  /oauth/jwks.json:
    get:
      tags: [OIDC]
      summary: Get JSON Web Key Set (JWKS)
      description: Returns the JSON Web Key Set containing the public keys used to verify JWT tokens
      responses:
        '200':
          description: JSON Web Key Set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKS'

  # User Details Endpoints
  /user-details:
    get:
      tags: [UserDetails]
      summary: Get all user details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user details retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user-details/{id}:
    get:
      tags: [UserDetails]
      summary: Get user details by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User details not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [UserDetails]
      summary: Update user details
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDetailsRequest'
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User details not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [UserDetails]
      summary: Delete user details
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '204':
          description: User details deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User details not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user-details/{id}/subordinates:
    get:
      tags: [UserDetails]
      summary: Get user's subordinates
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User subordinates retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Permissions Endpoints
  /permissions:
    get:
      tags: [Permissions]
      summary: Get all available permissions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of permissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /permissions/check:
    post:
      tags: [Permissions]
      summary: Check if a user has a specific permission on a resource
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckUserPermissionRequest'
      responses:
        '200':
          description: Permission check completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckUserPermissionResponse'
        '400':
          description: Bad request - missing required parameters
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions to check user permissions
        '404':
          description: User not found

  /permission:
    get:
      tags: [Permissions]
      summary: Get user permissions for a specific resource
      description: |
        Retrieve the authenticated user's role and permissions for a specific resource.
        
        **Authentication Required**: This endpoint requires a valid JWT Bearer token.
        
        **Query Parameters**: Must provide either `resourceId` or `resourceName` (but not both).
        
        **Authorization**:
        - Users can only view their own permissions
        - Super admins have implicit access to all resources
        - Regular users must have a role assigned to the resource (either specific or global)
        
        **Response**: Returns the user's role and permissions for the requested resource
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: resourceId
          schema:
            type: string
          description: The unique identifier of the resource
          example: "cmga8vhx10000n3q4mqfdvqea"
        - in: query
          name: resourceName
          schema:
            type: string
          description: The name of the resource
          example: "Organization A"
      responses:
        '200':
          description: User permissions retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResourcePermissionsResponse'
              example:
                resourceId: "cmga8vhx10000n3q4mqfdvqea"
                roleId: "cmga8vhx50002n3q4abc123def"
                role: "STAFF"
                permissions: ["user:read", "resource:read"]
        '400':
          description: Bad request - missing or invalid query parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Either resourceId or resourceName must be provided"
        '401':
          description: Unauthorized - missing or invalid JWT token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Authentication required"
        '404':
          description: Resource not found or user has no role for the specified resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                resource_not_found:
                  summary: Resource does not exist
                  value:
                    message: "Resource not found"
                no_role:
                  summary: User has no role for this resource
                  value:
                    message: "No role found for this user on the specified resource"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization: Bearer {token}"'

  schemas:
    # User-related schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User email address
        isActive:
          type: boolean
          description: Whether the user account is active
        isSuperAdmin:
          type: boolean
          description: Whether the user has super admin privileges
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          description: Global roles assigned to the user

    UserRole:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/Role'

    CreateUser:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          format: password
          minLength: 6
          description: User password (minimum 6 characters)
        isSuperAdmin:
          type: boolean
          description: Whether the user should be a super admin
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        nickName:
          type: string
          description: User's nickname
        contactNumber:
          type: string
          description: User's contact number
        reportTo:
          type: string
          format: uuid
          description: ID of the user's manager

    UpdateUserRoles:
      type: object
      required:
        - roles
      properties:
        roles:
          type: array
          items:
            type: string
          description: Array of role names to assign to the user

    UpdateUserSuperAdminRequest:
      type: object
      required:
        - isSuperAdmin
      properties:
        isSuperAdmin:
          type: boolean
          description: Whether the user should be a super admin

    UpdatePasswordRequest:
      type: object
      required:
        - userId
        - userEmail
        - new_password
        - new_password_confirmation
      properties:
        userId:
          type: string
          format: uuid
          description: The unique identifier of the user whose password is being updated
        userEmail:
          type: string
          format: email
          description: The email address of the user whose password is being updated
        current_password:
          type: string
          description: Current password (required for regular users, optional for SUPERADMIN when updating their own password)
        new_password:
          type: string
          minLength: 6
          description: New password (minimum 6 characters)
        new_password_confirmation:
          type: string
          minLength: 6
          description: New password confirmation (must match new_password)

    PasswordUpdateHistoryResponse:
      type: object
      properties:
        last_update:
          type: string
          nullable: true
          description: Date and time of the last password update in MM/DD/YYYY HH:MM:SS format
          example: "10/03/2025 14:22:30"
        updated_by:
          type: string
          nullable: true
          description: User ID of who performed the last password update
          example: "user-uuid"
        how_many:
          type: integer
          description: Total number of password updates for this user
          example: 1

    LastLoginResponse:
      type: object
      properties:
        last_login:
          type: string
          nullable: true
          description: Date and time of the last login in MM/DD/YYYY HH:MM:SS format
          example: "10/03/2025 14:22:30"

    UserDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        firstName:
          type: string
          nullable: true
          description: User's first name
        lastName:
          type: string
          nullable: true
          description: User's last name
        nickName:
          type: string
          nullable: true
          description: User's nickname
        contactNumber:
          type: string
          nullable: true
          description: User's contact number
        reportToId:
          type: string
          format: uuid
          nullable: true
          description: ID of the user's manager
        createdAt:
          type: string
          format: date-time
          description: Details creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        user:
          type: object
          properties:
            email:
              type: string
              format: email
              description: User email
            isSuperAdmin:
              type: boolean
              description: Whether user is super admin
            isActive:
              type: boolean
              description: Whether user is active
        reportTo:
          type: object
          nullable: true
          properties:
            id:
              type: string
              format: uuid
              description: Manager's user ID
            email:
              type: string
              format: email
              description: Manager's email
            details:
              type: object
              nullable: true
              properties:
                firstName:
                  type: string
                  nullable: true
                  description: Manager's first name
                lastName:
                  type: string
                  nullable: true
                  description: Manager's last name
                nickName:
                  type: string
                  nullable: true
                  description: Manager's nickname

    UpdateUserDetailsRequest:
      type: object
      properties:
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        nickName:
          type: string
          description: User's nickname
        contactNumber:
          type: string
          description: User's contact number
        reportTo:
          type: string
          format: uuid
          description: ID of the user's manager

    # Role and Permission schemas
    Role:
      type: object
      properties:
        id:
          type: string
          description: Role identifier
        name:
          type: string
          description: Role name
          example: ADMIN
        description:
          type: string
          nullable: true
          description: Role description
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/RolePermission'
          description: Permissions associated with this role

    AvailableRole:
      type: object
      description: Simplified role object for UI consumption
      properties:
        id:
          type: string
          description: Role identifier
          example: "clm1234567890"
        name:
          type: string
          description: Role name
          example: "CLIENT"
        description:
          type: string
          nullable: true
          description: Role description
          example: "Client User"

    Permission:
      type: object
      properties:
        id:
          type: string
          description: Permission identifier
        name:
          type: string
          description: Permission name
          example: read_users
        description:
          type: string
          nullable: true
          description: Permission description

    RolePermission:
      type: object
      properties:
        permission:
          $ref: '#/components/schemas/Permission'

    # Resource-based RBAC schemas
    Resource:
      type: object
      properties:
        id:
          type: string
          description: Resource identifier
        name:
          type: string
          description: Resource name
        description:
          type: string
          nullable: true
          description: Resource description
        createdAt:
          type: string
          format: date-time
          description: Resource creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    ResourceStatus:
      type: object
      properties:
        id:
          type: string
          description: Resource status record identifier
        resourceId:
          type: string
          description: The resource this status applies to
        status:
          type: string
          enum: [ACTIVE, INACTIVE, DELETED]
          description: The current status of the resource
        createdAt:
          type: string
          format: date-time
          description: Status record creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last status update timestamp

    CreateResourceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Resource name
        description:
          type: string
          description: Optional resource description
        id:
          type: string
          description: Optional custom resource ID. If not provided, an auto-generated ID will be used.
      description: Request payload for creating a new resource. Upon successful creation, a ResourceStatus record will be automatically created with ACTIVE status.

    ResourceRole:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Resource role identifier
        name:
          type: string
          description: Role name within the resource context
          example: editor
        resourceType:
          type: string
          description: Type of the resource
          example: Organization
        resourceId:
          type: string
          description: Unique identifier of the resource
          example: org_123
        description:
          type: string
          nullable: true
          description: Role description
        permissions:
          type: array
          items:
            type: string
          description: Permission verbs associated with this resource role
          example: ['read', 'update']
        createdAt:
          type: string
          format: date-time
          description: Role creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    CreateResourceRole:
      type: object
      required:
        - name
        - permissions
      properties:
        name:
          type: string
          description: Role name
          example: editor
        description:
          type: string
          description: Optional role description
        resourceId:
          type: string
          description: Optional resource ID for resource-specific roles
        permissions:
          type: array
          items:
            type: string
          minItems: 1
          description: Array of permission verbs
          example: ['read', 'update']

    AssignUserToResourceRole:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user to assign the role to

    AssignUserResourceRole:
      type: object
      required:
        - userId
        - roleId
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user to assign the role to
        roleId:
          type: string
          description: ID of the role to assign
        resourceId:
          type: string
          nullable: true
          description: Optional resource ID for resource-specific roles

    RevokeUserResourceRole:
      type: object
      required:
        - userId
        - roleId
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user to revoke the role from
        roleId:
          type: string
          description: ID of the role to revoke
        resourceId:
          type: string
          nullable: true
          description: Optional resource ID for resource-specific roles

    UserResourceRole:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: User identifier
        resourceRoleId:
          type: string
          format: uuid
          description: Resource role identifier
        resourceType:
          type: string
          description: Type of the resource
        resourceId:
          type: string
          description: Resource identifier

    UserResourcePermissions:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
          description: Array of permission verbs the user has for the resource
          example: ['read', 'update']

    UserResourceRoleResponse:
      type: object
      properties:
        role:
          type: string
          description: The user's role for the resource
          example: "editor"
        isSuperAdmin:
          type: boolean
          description: Whether the user is a super admin (always true for super admins regardless of resource)
          example: false
        resourceId:
          type: string
          description: The resource identifier
          example: "resource_123"
        roleType:
          type: string
          enum: [resource-specific, global]
          description: Whether this is a resource-specific role or a global role fallback
          example: "resource-specific"

    UserResourceRoleAssignment:
      type: object
      properties:
        resourceId:
          type: string
          description: The unique identifier of the resource
          example: "resource_123"
        resourceName:
          type: string
          description: The name of the resource
          example: "Organization A"
        roleName:
          type: string
          description: The name of the role assigned to the user for this resource
          example: "editor"
        roleId:
          type: string
          description: The unique identifier of the role
          example: "role_456"

    CheckUserPermissionRequest:
      type: object
      required:
        - userId
        - permission
        - resourceId
      properties:
        userId:
          type: string
          description: The unique identifier of the user
        permission:
          type: string
          description: The permission to check (e.g., "resource:read")
        resourceId:
          type: string
          description: The unique identifier of the resource

    CheckUserPermissionResponse:
      type: object
      properties:
        hasPermission:
          type: boolean
          description: Whether the user has the permission
        userPermissions:
          type: array
          items:
            type: string
          description: List of user's permissions
        checkedPermission:
          type: string
          description: The permission that was checked
        resourceId:
          type: string
          description: The resource ID that was checked
        reason:
          type: string
          description: Reason for permission grant (only present for super admins)

    GetResourceRolesRequest:
      type: object
      required:
        - resources
      properties:
        resources:
          type: array
          items:
            type: string
          minItems: 1
          description: Array of resource IDs to get roles for
          example: ["resource1", "resource2"]

    GetResourceRolesResponse:
      type: object
      properties:
        resourceRoles:
          type: array
          items:
            $ref: '#/components/schemas/ResourceRoleAssignment'
          description: Array of resource-role assignments for the authenticated user

    ResourceRoleAssignment:
      type: object
      properties:
        resourceId:
          type: string
          description: The unique identifier of the resource
          example: "resource1"
        roleName:
          type: string
          description: The name of the role assigned to the user for this resource
          example: "STAFF"
        roleId:
          type: string
          description: The unique identifier of the role
          example: "role123"

    # Pagination schemas
    PaginationQuery:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
          description: Number of items per page

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Number of items per page
        total:
          type: integer
          description: Total number of items
        totalPages:
          type: integer
          description: Total number of pages
        hasNext:
          type: boolean
          description: Whether there is a next page
        hasPrev:
          type: boolean
          description: Whether there is a previous page

    PaginatedUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: Array of users
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    PaginatedResourcesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
          description: Array of resources
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    # Authentication schemas
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          format: password
          minLength: 6
          description: User password (minimum 6 characters)

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          format: password
          description: User password

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: JWT refresh token

    UpdateProfileRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: New email address
        oldPassword:
          type: string
          format: password
          description: Current password (required if changing password)
        newPassword:
          type: string
          format: password
          minLength: 6
          description: New password (minimum 6 characters)

    ResendVerificationRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: The email address to resend verification for

    ResetPasswordRequest:
      type: object
      required:
        - newPassword
        - confirmPassword
      properties:
        newPassword:
          type: string
          format: password
          minLength: 6
          description: New password (minimum 6 characters)
        confirmPassword:
          type: string
          format: password
          minLength: 6
          description: Password confirmation (must match newPassword)

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token

    TokenValidationResult:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the token is valid
        decoded:
          type: object
          nullable: true
          description: Decoded token payload if valid
          properties:
            userId:
              type: string
              description: User ID from token
            isSuperAdmin:
              type: boolean
              description: Whether user is super admin
            permissions:
              type: array
              items:
                type: string
              description: User permissions
            role:
              type: string
              description: User role
            username:
              type: string
              description: User email (username)
            iat:
              type: number
              description: Token issued at timestamp
            exp:
              type: number
              description: Token expiration timestamp
        error:
          type: object
          nullable: true
          description: Error details if token is invalid

    # OpenID Connect schemas
    OpenIDConfiguration:
      type: object
      properties:
        issuer:
          type: string
          description: The authorization server identifier
        authorization_endpoint:
          type: string
          description: Authorization endpoint URL
        token_endpoint:
          type: string
          description: Token endpoint URL
        jwks_uri:
          type: string
          description: JSON Web Key Set URI
        response_types_supported:
          type: array
          items:
            type: string
          description: Supported response types
        subject_types_supported:
          type: array
          items:
            type: string
          description: Supported subject types
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: Supported ID token signing algorithms

    JWKS:
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
            properties:
              kty:
                type: string
                description: Key type
              use:
                type: string
                description: Key use
              alg:
                type: string
                description: Algorithm
              n:
                type: string
                description: RSA modulus
              e:
                type: string
                description: RSA exponent
          description: Array of JSON Web Keys

    # Common schemas
    UserResourcePermissionsResponse:
      type: object
      required:
        - resourceId
        - roleId
        - role
        - permissions
      properties:
        resourceId:
          type: string
          description: The unique identifier of the resource
          example: "cmga8vhx10000n3q4mqfdvqea"
        roleId:
          type: string
          description: The unique identifier of the user's role for this resource
          example: "cmga8vhx50002n3q4abc123def"
        role:
          type: string
          description: The name of the user's role for this resource
          example: "STAFF"
        permissions:
          type: array
          items:
            type: string
          description: Array of permission verbs the user has for this resource
          example: ["user:read", "resource:read"]

    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message

    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Operation success indicator

    AdminStatusResponse:
      type: object
      properties:
        totalUsers:
          type: integer
          description: Total number of users in the system
          example: 25
        totalResources:
          type: integer
          description: Total number of resources (excluding WINDBOOKS_APP)
          example: 10
        activeUsers:
          type: integer
          description: Number of active users
          example: 20
        activeResources:
          type: integer
          description: Number of active resources
          example: 8
        inactiveUsers:
          type: integer
          description: Number of inactive users
          example: 5
        inactiveResources:
          type: integer
          description: Number of inactive resources
          example: 1
        deletedUsers:
          type: integer
          description: Number of deleted users (currently always 0 as users are not soft-deleted)
          example: 0
        deletedResources:
          type: integer
          description: Number of deleted resources
          example: 1
        totalRoles:
          type: integer
          description: Total number of roles in the system
          example: 15
      required:
        - totalUsers
        - totalResources
        - activeUsers
        - activeResources
        - inactiveUsers
        - inactiveResources
        - deletedUsers
        - deletedResources
        - totalRoles
      example:
        totalUsers: 25
        totalResources: 10
        activeUsers: 20
        activeResources: 8
        inactiveUsers: 5
        inactiveResources: 1
        deletedUsers: 0
        deletedResources: 1
        totalRoles: 15

security:
  - bearerAuth: []