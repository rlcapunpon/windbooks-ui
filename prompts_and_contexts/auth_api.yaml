openapi: 3.0.0
info:
  title: User Authentication API
  version: 1.0.0
  description: |
    Comprehensive API documentation for the User Authentication Service with Resource-Based Access Control (RBAC).
    
    This API provides:
    - User authentication and authorization
    - Global role-based access control
    - Resource-specific role and permission management
    - OpenID Connect (OIDC) configuration
    - JWT token management
    
    ## Authentication
    Most endpoints require authentication via JWT Bearer tokens. Include the token in the Authorization header:
    ```
    Authorization: Bearer <your-jwt-token>
    ```
    
    ## Resource-Based Access Control
    The API supports both global roles (ADMIN, SUPERADMIN) and resource-specific roles.
    - Users can have multiple global roles
    - Users can have different roles for different resources
    - A user can only have one role per resource
    - Permissions are verb-based (read, write, update, delete, etc.)
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:3000/api
    description: Development server

tags:
  - name: Auth
    description: User authentication and authorization
  - name: Users
    description: User management
  - name: RBAC
    description: Role-based access control (global roles and permissions)
  - name: Resources
    description: Resource-based role and permission management
  - name: Config
    description: System configuration endpoints
  - name: OIDC
    description: OpenID Connect configuration
  - name: Health
    description: Health check endpoints
  - name: UserDetails
    description: User details management
  - name: Permissions
    description: Permission management

paths:
  # Health Check
  /health:
    get:
      tags: [Health]
      summary: Health check endpoint
      description: Simple health check to verify the API is running
      responses:
        '200':
          description: API is healthy
          content:
            text/plain:
              schema:
                type: string
                example: OK

  # Authentication Endpoints
  /auth/register:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error or user already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags: [Auth]
      summary: Log in a user and get JWT tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      tags: [Auth]
      summary: Refresh access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Tokens refreshed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '401':
          description: Unauthorized - invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags: [Auth]
      summary: Log out a user and revoke refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '204':
          description: User logged out successfully
        '400':
          description: Bad request - invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/me:
    get:
      tags: [Auth]
      summary: Get current user's profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [Auth]
      summary: Update current user's profile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error or old password mismatch
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [Auth]
      summary: Deactivate current user's account
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Account deactivated successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/validate:
    post:
      tags: [Auth]
      summary: Validate an access token
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateTokenRequest'
      responses:
        '200':
          description: Token validation result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenValidationResult'
        '400':
          description: Bad request - missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/verify/{verificationCode}:
    post:
      tags: [Auth]
      summary: Verify user email using verification code
      parameters:
        - in: path
          name: verificationCode
          required: true
          schema:
            type: string
            description: The email verification code sent to the user
      responses:
        '200':
          description: Email verified successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email verified successfully"
        '400':
          description: Bad request - invalid, expired, or already used verification code
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/resend-verification:
    post:
      tags: [Auth]
      summary: Resend email verification code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendVerificationRequest'
      responses:
        '200':
          description: Verification email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Verification email sent successfully"
        '400':
          description: Bad request - user not found, already verified, or invalid email
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # User Management Endpoints
  /users:
    get:
      tags: [Users]
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of users retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
    post:
      tags: [Users]
      summary: Create a new user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /users/v2:
    get:
      tags: [Users]
      summary: Get all users (paginated)
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
        - name: email
          in: query
          schema:
            type: string
          description: Filter users by email (case-insensitive partial match)
        - name: isActive
          in: query
          schema:
            type: boolean
          description: Filter users by active status (true for active, false for inactive)
      responses:
        '200':
          description: Paginated list of users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsersResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /users/{id}:
    get:
      tags: [Users]
      summary: Get a user by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found
    delete:
      tags: [Users]
      summary: Delete a user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '204':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found

  /users/{id}/super-admin:
    put:
      tags: [Users]
      summary: Update a user's super admin status
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserSuperAdminRequest'
      responses:
        '200':
          description: User super admin status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found

  /users/{id}/deactivate:
    put:
      tags: [Users]
      summary: Deactivate a user
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User deactivated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User not found

  /users/{id}/activate:
    put:
      tags: [Users]
      summary: Activate a user
      description: Activate a deactivated user account. Only SUPERADMIN users can perform this action.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '204':
          description: User activated successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - only SUPERADMIN can activate users
        '404':
          description: User not found

  /users/assign-role:
    post:
      tags: [Users]
      summary: Assign a resource role to a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignUserResourceRole'
      responses:
        '201':
          description: Role assigned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResourceRole'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /users/revoke-role:
    post:
      tags: [Users]
      summary: Revoke a resource role from a user
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeUserResourceRole'
      responses:
        '204':
          description: Role revoked successfully
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  # Global RBAC Endpoints
  /roles:
    get:
      tags: [RBAC]
      summary: Get all global roles
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /roles/available:
    get:
      tags: [RBAC]
      summary: Get available roles for UI consumption
      description: Retrieve a simplified list of all available roles that can be used by the frontend for user interface components like dropdowns or role selection
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of available roles retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AvailableRole'
        '401':
          description: Unauthorized - authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Resource-Based RBAC Endpoints
  /resources:
    get:
      tags: [Resources]
      summary: Get resources accessible to the authenticated user
      description: Retrieve all resources that the authenticated user has access to based on their assigned roles and permissions. Super admins see all resources, while regular users only see resources they have been granted access to.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of accessible resources retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
    post:
      tags: [Resources]
      summary: Create a new resource
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceRequest'
      responses:
        '201':
          description: Resource created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /resources/v2:
    get:
      tags: [Resources]
      summary: Get resources accessible to the authenticated user (paginated)
      description: Retrieve paginated resources that the authenticated user has access to based on their assigned roles and permissions. Super admins see all resources, while regular users only see resources they have been granted access to.
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Paginated list of accessible resources retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResourcesResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /resources/roles:
    post:
      tags: [Resources]
      summary: Create a role for a resource
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResourceRole'
      responses:
        '201':
          description: Resource role created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceRole'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '409':
          description: Conflict - role with this name already exists

  /resources/assign-role:
    post:
      tags: [Resources]
      summary: Assign a user to a resource role
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignUserToResourceRole'
      responses:
        '201':
          description: User assigned to resource role successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResourceRole'
        '400':
          description: Bad request - validation error
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: Resource role or user not found
        '409':
          description: Conflict - user already has a role for this resource

  /resources/revoke-role:
    post:
      tags: [Resources]
      summary: Remove a user from a resource role
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RevokeUserResourceRole'
      responses:
        '200':
          description: User removed from resource role successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Success'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions
        '404':
          description: User resource role assignment not found

  /resources/{resourceId}/test-read:
    get:
      tags: [Resources]
      summary: Test endpoint for read permission authorization
      description: Test endpoint to verify that the authorizeResource middleware works for read permissions
      security:
        - bearerAuth: []
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the resource
      responses:
        '200':
          description: Access granted - user has read permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access granted"
                  action:
                    type: string
                    example: "read"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions for this resource

  /resources/{resourceId}/test-write:
    post:
      tags: [Resources]
      summary: Test endpoint for write permission authorization
      description: Test endpoint to verify that the authorizeResource middleware works for write/update permissions
      security:
        - bearerAuth: []
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the resource
      responses:
        '200':
          description: Access granted - user has write/update permission
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Access granted"
                  action:
                    type: string
                    example: "write"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions for this resource

  /resources/{resourceId}/user-role:
    get:
      tags: [Resources]
      summary: Get the authenticated user's role for a specific resource
      description: Retrieve the role of the authenticated user for a specific resource. Returns the resource-specific role if assigned, otherwise returns the user's global role. Super admins always return their super admin status.
      security:
        - bearerAuth: []
      parameters:
        - name: resourceId
          in: path
          required: true
          schema:
            type: string
          description: The unique identifier of the resource
      responses:
        '200':
          description: User role retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResourceRoleResponse'
        '401':
          description: Unauthorized - authentication required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User has no role for this resource
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Configuration Endpoints
  /config/permissions:
    get:
      tags: [Config]
      summary: Get role-permission mapping
      description: Retrieve the system-wide default role-to-permission mapping
      responses:
        '200':
          description: Role-permission mapping retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    role:
                      type: string
                      example: "ADMIN"
                    permissions:
                      type: array
                      items:
                        type: string
                        example: "read:users"
        '500':
          description: Internal server error

  # OpenID Connect Endpoints
  /.well-known/openid-configuration:
    get:
      tags: [OIDC]
      summary: Get OpenID Connect configuration
      description: Returns the OpenID Connect configuration for this authorization server
      responses:
        '200':
          description: OpenID Connect configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenIDConfiguration'

  /oauth/jwks.json:
    get:
      tags: [OIDC]
      summary: Get JSON Web Key Set (JWKS)
      description: Returns the JSON Web Key Set containing the public keys used to verify JWT tokens
      responses:
        '200':
          description: JSON Web Key Set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKS'

  # User Details Endpoints
  /user-details:
    get:
      tags: [UserDetails]
      summary: Get all user details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of user details retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user-details/{id}:
    get:
      tags: [UserDetails]
      summary: Get user details by ID
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User details not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags: [UserDetails]
      summary: Update user details
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDetailsRequest'
      responses:
        '200':
          description: User details updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '400':
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User details not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags: [UserDetails]
      summary: Delete user details
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '204':
          description: User details deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User details not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /user-details/{id}/subordinates:
    get:
      tags: [UserDetails]
      summary: Get user's subordinates
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: User ID
      responses:
        '200':
          description: User subordinates retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserDetails'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Permissions Endpoints
  /permissions:
    get:
      tags: [Permissions]
      summary: Get all available permissions
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of permissions retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions

  /permissions/check:
    post:
      tags: [Permissions]
      summary: Check if a user has a specific permission on a resource
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckUserPermissionRequest'
      responses:
        '200':
          description: Permission check completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckUserPermissionResponse'
        '400':
          description: Bad request - missing required parameters
        '401':
          description: Unauthorized
        '403':
          description: Forbidden - insufficient permissions to check user permissions
        '404':
          description: User not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: 'JWT Authorization header using the Bearer scheme. Example: "Authorization: Bearer {token}"'

  schemas:
    # User-related schemas
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User email address
        isActive:
          type: boolean
          description: Whether the user account is active
        isSuperAdmin:
          type: boolean
          description: Whether the user has super admin privileges
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        roles:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
          description: Global roles assigned to the user

    UserRole:
      type: object
      properties:
        role:
          $ref: '#/components/schemas/Role'

    CreateUser:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          format: password
          minLength: 6
          description: User password (minimum 6 characters)
        isSuperAdmin:
          type: boolean
          description: Whether the user should be a super admin
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        nickName:
          type: string
          description: User's nickname
        contactNumber:
          type: string
          description: User's contact number
        reportTo:
          type: string
          format: uuid
          description: ID of the user's manager

    UpdateUserRoles:
      type: object
      required:
        - roles
      properties:
        roles:
          type: array
          items:
            type: string
          description: Array of role names to assign to the user

    UpdateUserSuperAdminRequest:
      type: object
      required:
        - isSuperAdmin
      properties:
        isSuperAdmin:
          type: boolean
          description: Whether the user should be a super admin

    UserDetails:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: User ID
        firstName:
          type: string
          nullable: true
          description: User's first name
        lastName:
          type: string
          nullable: true
          description: User's last name
        nickName:
          type: string
          nullable: true
          description: User's nickname
        contactNumber:
          type: string
          nullable: true
          description: User's contact number
        reportToId:
          type: string
          format: uuid
          nullable: true
          description: ID of the user's manager
        createdAt:
          type: string
          format: date-time
          description: Details creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        user:
          type: object
          properties:
            email:
              type: string
              format: email
              description: User email
            isSuperAdmin:
              type: boolean
              description: Whether user is super admin
            isActive:
              type: boolean
              description: Whether user is active
        reportTo:
          type: object
          nullable: true
          properties:
            id:
              type: string
              format: uuid
              description: Manager's user ID
            email:
              type: string
              format: email
              description: Manager's email
            details:
              type: object
              nullable: true
              properties:
                firstName:
                  type: string
                  nullable: true
                  description: Manager's first name
                lastName:
                  type: string
                  nullable: true
                  description: Manager's last name
                nickName:
                  type: string
                  nullable: true
                  description: Manager's nickname

    UpdateUserDetailsRequest:
      type: object
      properties:
        firstName:
          type: string
          description: User's first name
        lastName:
          type: string
          description: User's last name
        nickName:
          type: string
          description: User's nickname
        contactNumber:
          type: string
          description: User's contact number
        reportTo:
          type: string
          format: uuid
          description: ID of the user's manager

    # Role and Permission schemas
    Role:
      type: object
      properties:
        id:
          type: string
          description: Role identifier
        name:
          type: string
          description: Role name
          example: ADMIN
        description:
          type: string
          nullable: true
          description: Role description
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/RolePermission'
          description: Permissions associated with this role

    AvailableRole:
      type: object
      description: Simplified role object for UI consumption
      properties:
        id:
          type: string
          description: Role identifier
          example: "clm1234567890"
        name:
          type: string
          description: Role name
          example: "CLIENT"
        description:
          type: string
          nullable: true
          description: Role description
          example: "Client User"

    Permission:
      type: object
      properties:
        id:
          type: string
          description: Permission identifier
        name:
          type: string
          description: Permission name
          example: read_users
        description:
          type: string
          nullable: true
          description: Permission description

    RolePermission:
      type: object
      properties:
        permission:
          $ref: '#/components/schemas/Permission'

    # Resource-based RBAC schemas
    Resource:
      type: object
      properties:
        id:
          type: string
          description: Resource identifier
        name:
          type: string
          description: Resource name
        description:
          type: string
          nullable: true
          description: Resource description
        createdAt:
          type: string
          format: date-time
          description: Resource creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    CreateResourceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: Resource name
        description:
          type: string
          description: Optional resource description

    ResourceRole:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Resource role identifier
        name:
          type: string
          description: Role name within the resource context
          example: editor
        resourceType:
          type: string
          description: Type of the resource
          example: Organization
        resourceId:
          type: string
          description: Unique identifier of the resource
          example: org_123
        description:
          type: string
          nullable: true
          description: Role description
        permissions:
          type: array
          items:
            type: string
          description: Permission verbs associated with this resource role
          example: ['read', 'update']
        createdAt:
          type: string
          format: date-time
          description: Role creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp

    CreateResourceRole:
      type: object
      required:
        - name
        - permissions
      properties:
        name:
          type: string
          description: Role name
          example: editor
        description:
          type: string
          description: Optional role description
        resourceId:
          type: string
          description: Optional resource ID for resource-specific roles
        permissions:
          type: array
          items:
            type: string
          minItems: 1
          description: Array of permission verbs
          example: ['read', 'update']

    AssignUserToResourceRole:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user to assign the role to

    AssignUserResourceRole:
      type: object
      required:
        - userId
        - roleId
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user to assign the role to
        roleId:
          type: string
          description: ID of the role to assign
        resourceId:
          type: string
          nullable: true
          description: Optional resource ID for resource-specific roles

    RevokeUserResourceRole:
      type: object
      required:
        - userId
        - roleId
      properties:
        userId:
          type: string
          format: uuid
          description: ID of the user to revoke the role from
        roleId:
          type: string
          description: ID of the role to revoke
        resourceId:
          type: string
          nullable: true
          description: Optional resource ID for resource-specific roles

    UserResourceRole:
      type: object
      properties:
        userId:
          type: string
          format: uuid
          description: User identifier
        resourceRoleId:
          type: string
          format: uuid
          description: Resource role identifier
        resourceType:
          type: string
          description: Type of the resource
        resourceId:
          type: string
          description: Resource identifier

    UserResourcePermissions:
      type: object
      properties:
        permissions:
          type: array
          items:
            type: string
          description: Array of permission verbs the user has for the resource
          example: ['read', 'update']

    UserResourceRoleResponse:
      type: object
      properties:
        role:
          type: string
          description: The user's role for the resource
          example: "editor"
        isSuperAdmin:
          type: boolean
          description: Whether the user is a super admin (always true for super admins regardless of resource)
          example: false
        resourceId:
          type: string
          description: The resource identifier
          example: "resource_123"
        roleType:
          type: string
          enum: [resource-specific, global]
          description: Whether this is a resource-specific role or a global role fallback
          example: "resource-specific"

    CheckUserPermissionRequest:
      type: object
      required:
        - userId
        - permission
        - resourceId
      properties:
        userId:
          type: string
          description: The unique identifier of the user
        permission:
          type: string
          description: The permission to check (e.g., "resource:read")
        resourceId:
          type: string
          description: The unique identifier of the resource

    CheckUserPermissionResponse:
      type: object
      properties:
        hasPermission:
          type: boolean
          description: Whether the user has the permission
        userPermissions:
          type: array
          items:
            type: string
          description: List of user's permissions
        checkedPermission:
          type: string
          description: The permission that was checked
        resourceId:
          type: string
          description: The resource ID that was checked
        reason:
          type: string
          description: Reason for permission grant (only present for super admins)

    # Pagination schemas
    PaginationQuery:
      type: object
      properties:
        page:
          type: integer
          minimum: 1
          default: 1
          description: Page number
        limit:
          type: integer
          minimum: 1
          maximum: 100
          default: 10
          description: Number of items per page

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          description: Current page number
        limit:
          type: integer
          description: Number of items per page
        total:
          type: integer
          description: Total number of items
        totalPages:
          type: integer
          description: Total number of pages
        hasNext:
          type: boolean
          description: Whether there is a next page
        hasPrev:
          type: boolean
          description: Whether there is a previous page

    PaginatedUsersResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
          description: Array of users
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    PaginatedResourcesResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Resource'
          description: Array of resources
        pagination:
          $ref: '#/components/schemas/PaginationMeta'

    # Authentication schemas
    RegisterRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          format: password
          minLength: 6
          description: User password (minimum 6 characters)

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          description: User email address
        password:
          type: string
          format: password
          description: User password

    RefreshTokenRequest:
      type: object
      required:
        - refreshToken
      properties:
        refreshToken:
          type: string
          description: JWT refresh token

    UpdateProfileRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: New email address
        oldPassword:
          type: string
          format: password
          description: Current password (required if changing password)
        newPassword:
          type: string
          format: password
          minLength: 6
          description: New password (minimum 6 characters)

    ResendVerificationRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
          description: The email address to resend verification for

    AuthTokens:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
        refreshToken:
          type: string
          description: JWT refresh token

    TokenValidationResult:
      type: object
      properties:
        valid:
          type: boolean
          description: Whether the token is valid
        decoded:
          type: object
          nullable: true
          description: Decoded token payload if valid
          properties:
            userId:
              type: string
              description: User ID from token
            isSuperAdmin:
              type: boolean
              description: Whether user is super admin
            permissions:
              type: array
              items:
                type: string
              description: User permissions
            role:
              type: string
              description: User role
            username:
              type: string
              description: User email (username)
            iat:
              type: number
              description: Token issued at timestamp
            exp:
              type: number
              description: Token expiration timestamp
        error:
          type: object
          nullable: true
          description: Error details if token is invalid

    # OpenID Connect schemas
    OpenIDConfiguration:
      type: object
      properties:
        issuer:
          type: string
          description: The authorization server identifier
        authorization_endpoint:
          type: string
          description: Authorization endpoint URL
        token_endpoint:
          type: string
          description: Token endpoint URL
        jwks_uri:
          type: string
          description: JSON Web Key Set URI
        response_types_supported:
          type: array
          items:
            type: string
          description: Supported response types
        subject_types_supported:
          type: array
          items:
            type: string
          description: Supported subject types
        id_token_signing_alg_values_supported:
          type: array
          items:
            type: string
          description: Supported ID token signing algorithms

    JWKS:
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
            properties:
              kty:
                type: string
                description: Key type
              use:
                type: string
                description: Key use
              alg:
                type: string
                description: Algorithm
              n:
                type: string
                description: RSA modulus
              e:
                type: string
                description: RSA exponent
          description: Array of JSON Web Keys

    # Common schemas
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message

    Success:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: Operation success indicator

security:
  - bearerAuth: []